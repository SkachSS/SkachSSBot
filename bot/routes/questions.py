# -*- coding: utf-8 -*-
#
#  SkachSSBot - Route: questions.
#  Created by Sergey Skachkov at 9/4/22
#
from vkbottle.bot import BotLabeler, Message
from vkbottle.dispatch import BuiltinStateDispenser
from vkbottle.dispatch.rules.base import (CommandRule, PayloadRule)
from vkbottle import BaseStateGroup, Keyboard, KeyboardButtonColor, Text, Location


bl = BotLabeler()
st = BuiltinStateDispenser()


class QuizStates(BaseStateGroup):
    SKY_COLOR = 0  # –ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –Ω–µ–±–æ?
    WHAT_IS_SENSE = 1  # –ß—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ–∑–Ω–∞–Ω–∏–µ?
    SPRUCE_COLOR = 2  # –ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –Å–ª–∫–∞?
    WHAT_IS_AMPER = 3  # –ß—Ç–æ —Ç–∞–∫–æ–µ –ê–º–ø–µ—Ä?
    MARS_COLOR = 4  # –ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –ø–ª–∞–Ω–µ—Ç–∞ –ú–∞—Ä—Å?
    CATS_OR_DOGS = 5  # –ö–æ—à–∫–∏ –∏–ª–∏ —Å–æ–±–∞–∫–∏?
    LIKE_OSCAR = 6  # –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –û—Å–∫–∞—Ä 2022 –≥–æ–¥–∞?
    LOCATION = 7  # –ó–∞–ø—Ä–æ—Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.


@bl.message(CommandRule('quiz_over', ['/']))
@bl.message(PayloadRule({'cmd': 'quiz_over'}))
async def quiz_over(msg: Message):
    await msg.answer('–•–æ—Ä–æ—à–æ, –Ω–æ –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—ã–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /quiz')


@bl.message(CommandRule('quiz', ['/']))
async def start_quiz(msg: Message):
    key = Keyboard(True)
    key.add(
        Text('–°–∏–Ω–µ–≥–æ', {'sky_color': 'blue'}),
        KeyboardButtonColor.PRIMARY)
    key.add(
        Text('–ó–µ–ª–µ–Ω–æ–≥–æ', {'sky_color': 'green'}),
        KeyboardButtonColor.POSITIVE)
    key.add(
        Text('–ö—Ä–∞—Å–Ω–æ–≥–æ', {'sky_color': 'red'}),
        KeyboardButtonColor.NEGATIVE)
    key.row()
    key.add(
        Text('–•–≤–∞—Ç–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤', {'cmd': 'quiz_over'}),
        KeyboardButtonColor.SECONDARY)
    await msg.answer(
        '–î–∞–≤–∞–π —è –∑–∞–¥–∞–º —Ç–µ–±–µ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤!\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞.\n\n[1/8] - –ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –Ω–µ–±–æ?',
        keyboard=key.get_json())


@bl.message(payload_map=[('sky_color', str)])
async def what_is_sense(msg: Message):
    choice = msg.get_payload_json()['sky_color']
    key = Keyboard(True)
    key.add(
        Text('–°–æ–∑–µ—Ä—Ü–∞–Ω–∏–µ', {'what_is_sense': 'contemplation'}),
        KeyboardButtonColor.PRIMARY)
    key.add(
        Text('–ü–æ–∑—Å–æ–∑–Ω–∞–Ω–∏–µ', {'what_is_sense': 'subconscious'}),
        KeyboardButtonColor.PRIMARY)
    key.row()
    key.add(
        Text('–ë—ã—Ç–∏–µ', {'what_is_sense': 'existence'}),
        KeyboardButtonColor.PRIMARY)
    key.add(
        Text('–ñ–∏–∑–Ω—å', {'what_is_sense': 'life'}),
        KeyboardButtonColor.PRIMARY)
    key.row()
    key.add(
        Text('–•–≤–∞—Ç–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤', {'cmd': 'quiz_over'}),
        KeyboardButtonColor.SECONDARY)
    answer_is = '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!' if choice == 'blue' else '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!'
    await msg.answer(
        f'{answer_is}\n\n[2/8] - –ß—Ç–æ, —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–º—É, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ–∑–Ω–∞–Ω–∏–µ?',
        keyboard=key.get_json())


@bl.message(payload_map=[('what_is_sense', str)])
async def spruce_color(msg: Message):
    choice = msg.get_payload_json()['what_is_sense']
    key = Keyboard(True)
    key.add(
        Text('–ö—Ä–∞—Å–Ω–∞—è', {'spruce_color': 'red'}),
        KeyboardButtonColor.NEGATIVE)
    key.add(
        Text('–ó–µ–ª—ë–Ω–∞—è', {'spruce_color': 'green'}),
        KeyboardButtonColor.POSITIVE)
    key.row()
    key.add(
        Text('–°–∏–Ω—è—è', {'spruce_color': 'blue'}),
        KeyboardButtonColor.PRIMARY)
    key.add(
        Text('–°–µ—Ä–∞—è', {'spruce_color': 'grey'}),
        KeyboardButtonColor.SECONDARY)
    key.row()
    key.add(
        Text('–•–≤–∞—Ç–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤', {'cmd': 'quiz_over'}),
        KeyboardButtonColor.SECONDARY)
    answer_is = '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!' if choice == 'existence' else '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!'
    await msg.answer(
        f'{answer_is}\n\n[3/8] - –ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –Å–ª–∫–∞?',
        keyboard=key.get_json())


@bl.message(payload_map=[('spruce_color', str)])
async def what_is_amper(msg: Message):
    choice = msg.get_payload_json()['spruce_color']
    key = Keyboard(True)
    key.add(
        Text('–ß–µ–ª–æ–≤–µ–∫', {'what_is_amper': 'human'}),
        KeyboardButtonColor.PRIMARY)
    key.add(
        Text('–£—á—ë–Ω—ã–π', {'what_is_amper': 'scientist'}),
        KeyboardButtonColor.PRIMARY)
    key.row()
    key.add(
        Text('–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è', {'what_is_amper': 'unit'}),
        KeyboardButtonColor.PRIMARY)
    key.row()
    key.add(
        Text('–•–≤–∞—Ç–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤', {'cmd': 'quiz_over'}),
        KeyboardButtonColor.SECONDARY)
    answer_is = '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!' if choice == 'green' else '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!'
    await msg.answer(
        f'{answer_is}\n–°–ª–µ–¥—É—é—â–∏–µ 2 –≤–æ–ø—Ä–æ—Å–∞ —Å –ø–æ–¥–≤–æ—Ö–æ–º! :D\n\n[4/8] - –ö—Ç–æ/–ß—Ç–æ —Ç–∞–∫–æ–µ –ê–º–ø–µ—Ä?',
        keyboard=key.get_json())


@bl.message(payload_map=[('what_is_amper', str)])
async def mars_color(msg: Message):
    key = Keyboard(True)
    key.add(
        Text('–ö—Ä–∞—Å–Ω–æ–≥–æ', {'mars_color': 'red'}),
        KeyboardButtonColor.POSITIVE)
    key.add(
        Text('–ó–µ–ª–µ–Ω–æ–≥–æ', {'mars_color': 'green'}),
        KeyboardButtonColor.NEGATIVE)
    key.row()
    key.add(
        Text('–°–µ—Ä–æ–≥–æ', {'mars_color': 'grey'}),
        KeyboardButtonColor.PRIMARY)
    key.add(
        Text('–°–∏–Ω–µ–≥–æ', {'mars_color': 'blue'}),
        KeyboardButtonColor.SECONDARY)
    key.row()
    key.add(
        Text('–•–≤–∞—Ç–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤', {'cmd': 'quiz_over'}),
        KeyboardButtonColor.SECONDARY)
    await msg.answer(
        '–õ—é–±–æ–π –æ—Ç–≤–µ—Ç –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º! :D\n\n[5/8] - –ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –ø–ª–∞–Ω–µ—Ç–∞ –ú–∞—Ä—Å?',
        keyboard=key.get_json())


@bl.message(payload_map=[('mars_color', str)])
async def cats_or_dogs(msg: Message):
    choice = msg.get_payload_json()['mars_color']
    key = Keyboard(True)
    key.add(
        Text('–ö–æ—à–∫–∏ üê±', {'cats_or_dogs': 'cats'}),
        KeyboardButtonColor.POSITIVE
    )
    key.add(
        Text('–°–æ–±–∞–∫–∏ üê∂', {'cats_or_dogs': 'dogs'}),
        KeyboardButtonColor.POSITIVE
    )
    key.row()
    key.add(
        Text('–•–≤–∞—Ç–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤', {'cmd': 'quiz_over'}),
        KeyboardButtonColor.SECONDARY)
    answer_is = '–ù—É –∫–æ–Ω–µ—á–Ω–æ –∫—Ä–∞—Å–Ω–æ–≥–æ!' if choice == 'red' else '–¢—ã —á—Ç–æ! –ú–∞—Ä—Å - –ö—Ä–∞—Å–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞.'
    await msg.answer(
        f'{answer_is}\n\n[6/8] - –°–æ–±–∞—á–∫–∏ –∏–ª–∏ –ö–æ—à–∫–∏?',
        keyboard=key.get_json())


@bl.message(payload_map=[('cats_or_dogs', str)])
async def like_oscar(msg: Message):
    choice = msg.get_payload_json()['cats_or_dogs']
    key = Keyboard(True)
    key.add(
        Text('–î–∞', {'like_oscar': 'yes'}),
        KeyboardButtonColor.POSITIVE
    )
    key.add(
        Text('–ù–µ—Ç', {'like_oscar': 'no'}),
        KeyboardButtonColor.NEGATIVE
    )
    key.row()
    key.add(
        Text('–•–≤–∞—Ç–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤', {'cmd': 'quiz_over'}),
        KeyboardButtonColor.SECONDARY)
    answer_is = '–°–æ–±–∞–∫–∏ –∫—Ä—É—Ç—ã–µ! üêï' if choice == 'dogs' else '–ö–æ—à–∫–∏ –∫—Ä—É—Ç—ã–µ! üêà'
    await msg.answer(
        f'{answer_is}\n\n[7/8] - –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –û—Å–∫–∞—Ä 2022?',
        keyboard=key.get_json())


@bl.message(payload_map=[('like_oscar', str)])
async def share_location(msg: Message):
    choice = msg.get_payload_json()['like_oscar']
    key = Keyboard(True)
    key.add(Location({'share_location': 'yes'}))
    key.row()
    key.add(
        Text('–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ', {'share_location': 'no'}),
        KeyboardButtonColor.NEGATIVE
    )
    answer_is = '–ü–æ–Ω–∏–º–∞—é, –º–Ω–µ —Ç–æ–∂–µ.' if choice == 'no' else '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –æ—Ç–≤–µ—Ç, –Ω—É –ª–∞–¥–Ω–æ.'
    await msg.answer(
        f'{answer_is}\n\n–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å!\n–ü–æ–¥–µ–ª–∏—Å—å —Å –Ω–∞–º–∏ —Ç–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n(–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–∏–∫–∞–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ—Ç :D)',
        keyboard=key.get_json())


@bl.message(payload_map=[('share_location', str)])
async def quiz_end(msg: Message):
    choice = msg.get_payload_json()['share_location']
    answer_is = '–°–ø–∞—Å–∏–±–æ –∑–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ!' if choice == 'yes' else '–ù—É –∏ –ª–∞–¥–Ω–æ((('
    await msg.answer(answer_is)
